'use strict';

var _debugSettings = require('./debug-settings');

var _debugSettings2 = _interopRequireDefault(_debugSettings);

require('babel-polyfill');

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _cookieParser = require('cookie-parser');

var _cookieParser2 = _interopRequireDefault(_cookieParser);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _serveStatic = require('serve-static');

var _serveStatic2 = _interopRequireDefault(_serveStatic);

var _passport = require('passport');

var _passport2 = _interopRequireDefault(_passport);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _models = require('./models');

var _models2 = _interopRequireDefault(_models);

var _config = require('../configs/config.js');

var _config2 = _interopRequireDefault(_config);

var _nodeYaml = require('node-yaml');

var _nodeYaml2 = _interopRequireDefault(_nodeYaml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var express = require('express');
var session = require("express-session");
var consola = require('consola');

var _require = require('nuxt'),
    Nuxt = _require.Nuxt,
    Builder = _require.Builder;

var app = express();
var host = _config2.default.host;
var port = _config2.default.port;

d.app = app;
d.consola = consola;
d.m = _mongoose2.default;

app.set('port', port);
app.set('strict routing', true);
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use((0, _cookieParser2.default)());
app.use(session({
  secret: 'keyboard cat', // TODO: be random later
  resave: false,
  saveUninitialized: false
}));
app.use(_passport2.default.initialize());
app.use(_passport2.default.session());

var expressWs = require('express-ws')(app);
// mount routers for backend
var mounted = require('./routes').default(app);

// Import and Set Nuxt.js options
var config = require('../nuxt.config.js');
config.dev = !(process.env.NODE_ENV === 'production');

d.nuxtConfig = config;
d.config = _config2.default;
d.yaml = _nodeYaml2.default;
var databaseConfig = _nodeYaml2.default.readSync('../configs/mongod.yml');
d.databaseConfig = databaseConfig;

// auth
// let User = require('./models/models').default.User
var Models = require('./models/models').default;
var User = Models.User;
var LocalStrategy = require('passport-local').Strategy;
_passport2.default.use(new LocalStrategy(User.authenticate()));
_passport2.default.serializeUser(User.serializeUser());
_passport2.default.deserializeUser(User.deserializeUser());

async function start() {
  // Init Nuxt.js
  await (0, _models2.default)({ config: _config2.default, databaseConfig: databaseConfig });
  var nuxt = new Nuxt(config);

  // Build only in dev mode
  if (config.dev) {
    var builder = new Builder(nuxt);
    await builder.build();
  }

  // Give nuxt middleware to express
  app.use(nuxt.render);

  // Listen the server
  app.listen(port, host);
  consola.ready({
    message: 'Server listening on http://' + host + ':' + port,
    badge: true
  });
  if (_config2.default.database == 'test') {
    consola.warn({
      message: 'You are using the \'test\' database, Accretion is thus in the test mode.\n  * The database will be reset by test data each time you start the brainhole.\n  * Use other database name if you want to use the Accretion normally\n  * See the config file \'configs/config.js\'',
      badge: true
    });
  }
}
start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci1zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJzZXNzaW9uIiwiY29uc29sYSIsIk51eHQiLCJCdWlsZGVyIiwiYXBwIiwiaG9zdCIsImdsb2JhbENvbmZpZyIsInBvcnQiLCJkIiwibSIsIm1vbmdvb3NlIiwic2V0IiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInNlY3JldCIsInJlc2F2ZSIsInNhdmVVbmluaXRpYWxpemVkIiwicGFzc3BvcnQiLCJpbml0aWFsaXplIiwiZXhwcmVzc1dzIiwibW91bnRlZCIsImRlZmF1bHQiLCJjb25maWciLCJkZXYiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJudXh0Q29uZmlnIiwieWFtbCIsImRhdGFiYXNlQ29uZmlnIiwicmVhZFN5bmMiLCJNb2RlbHMiLCJVc2VyIiwiTG9jYWxTdHJhdGVneSIsIlN0cmF0ZWd5IiwiYXV0aGVudGljYXRlIiwic2VyaWFsaXplVXNlciIsImRlc2VyaWFsaXplVXNlciIsInN0YXJ0IiwibnV4dCIsImJ1aWxkZXIiLCJidWlsZCIsInJlbmRlciIsImxpc3RlbiIsInJlYWR5IiwibWVzc2FnZSIsImJhZGdlIiwiZGF0YWJhc2UiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxVQUFVQyxRQUFRLFNBQVIsQ0FBaEI7QUFDQSxJQUFNQyxVQUFVRCxRQUFRLGlCQUFSLENBQWhCO0FBQ0EsSUFBTUUsVUFBVUYsUUFBUSxTQUFSLENBQWhCOztlQUMwQkEsUUFBUSxNQUFSLEM7SUFBbEJHLEksWUFBQUEsSTtJQUFNQyxPLFlBQUFBLE87O0FBQ2QsSUFBTUMsTUFBTU4sU0FBWjtBQUNBLElBQU1PLE9BQU9DLGlCQUFhRCxJQUExQjtBQUNBLElBQU1FLE9BQU9ELGlCQUFhQyxJQUExQjs7QUFFQUMsRUFBRUosR0FBRixHQUFRQSxHQUFSO0FBQ0FJLEVBQUVQLE9BQUYsR0FBWUEsT0FBWjtBQUNBTyxFQUFFQyxDQUFGLEdBQU1DLGtCQUFOOztBQUVBTixJQUFJTyxHQUFKLENBQVEsTUFBUixFQUFnQkosSUFBaEI7QUFDQUgsSUFBSU8sR0FBSixDQUFRLGdCQUFSLEVBQTBCLElBQTFCO0FBQ0FQLElBQUlRLEdBQUosQ0FBUWQsUUFBUWUsSUFBUixFQUFSO0FBQ0FULElBQUlRLEdBQUosQ0FBUWQsUUFBUWdCLFVBQVIsQ0FBbUIsRUFBRUMsVUFBVSxLQUFaLEVBQW5CLENBQVI7QUFDQVgsSUFBSVEsR0FBSixDQUFRLDZCQUFSO0FBQ0FSLElBQUlRLEdBQUosQ0FBUVosUUFBUTtBQUNkZ0IsVUFBUSxjQURNLEVBQ1U7QUFDeEJDLFVBQVEsS0FGTTtBQUdkQyxxQkFBbUI7QUFITCxDQUFSLENBQVI7QUFLQWQsSUFBSVEsR0FBSixDQUFRTyxtQkFBU0MsVUFBVCxFQUFSO0FBQ0FoQixJQUFJUSxHQUFKLENBQVFPLG1CQUFTbkIsT0FBVCxFQUFSOztBQUVBLElBQUlxQixZQUFZdEIsUUFBUSxZQUFSLEVBQXNCSyxHQUF0QixDQUFoQjtBQUNBO0FBQ0EsSUFBSWtCLFVBQVV2QixRQUFRLFVBQVIsRUFBb0J3QixPQUFwQixDQUE0Qm5CLEdBQTVCLENBQWQ7O0FBRUE7QUFDQSxJQUFJb0IsU0FBU3pCLFFBQVEsbUJBQVIsQ0FBYjtBQUNBeUIsT0FBT0MsR0FBUCxHQUFhLEVBQUVDLFFBQVFDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUEzQixDQUFiOztBQUVBcEIsRUFBRXFCLFVBQUYsR0FBZUwsTUFBZjtBQUNBaEIsRUFBRWdCLE1BQUYsR0FBV2xCLGdCQUFYO0FBQ0FFLEVBQUVzQixJQUFGLEdBQVNBLGtCQUFUO0FBQ0EsSUFBSUMsaUJBQWlCRCxtQkFBS0UsUUFBTCxDQUFjLHVCQUFkLENBQXJCO0FBQ0F4QixFQUFFdUIsY0FBRixHQUFtQkEsY0FBbkI7O0FBRUE7QUFDQTtBQUNBLElBQU1FLFNBQVNsQyxRQUFRLGlCQUFSLEVBQTJCd0IsT0FBMUM7QUFDQSxJQUFJVyxPQUFPRCxPQUFPQyxJQUFsQjtBQUNBLElBQU1DLGdCQUFnQnBDLFFBQVEsZ0JBQVIsRUFBMEJxQyxRQUFoRDtBQUNBakIsbUJBQVNQLEdBQVQsQ0FBYSxJQUFJdUIsYUFBSixDQUFrQkQsS0FBS0csWUFBTCxFQUFsQixDQUFiO0FBQ0FsQixtQkFBU21CLGFBQVQsQ0FBdUJKLEtBQUtJLGFBQUwsRUFBdkI7QUFDQW5CLG1CQUFTb0IsZUFBVCxDQUF5QkwsS0FBS0ssZUFBTCxFQUF6Qjs7QUFFQSxlQUFlQyxLQUFmLEdBQXVCO0FBQ3JCO0FBQ0EsUUFBTSxzQkFBYyxFQUFDaEIsUUFBUWxCLGdCQUFULEVBQXVCeUIsOEJBQXZCLEVBQWQsQ0FBTjtBQUNBLE1BQU1VLE9BQU8sSUFBSXZDLElBQUosQ0FBU3NCLE1BQVQsQ0FBYjs7QUFFQTtBQUNBLE1BQUlBLE9BQU9DLEdBQVgsRUFBZ0I7QUFDZCxRQUFNaUIsVUFBVSxJQUFJdkMsT0FBSixDQUFZc0MsSUFBWixDQUFoQjtBQUNBLFVBQU1DLFFBQVFDLEtBQVIsRUFBTjtBQUNEOztBQUVEO0FBQ0F2QyxNQUFJUSxHQUFKLENBQVE2QixLQUFLRyxNQUFiOztBQUVBO0FBQ0F4QyxNQUFJeUMsTUFBSixDQUFXdEMsSUFBWCxFQUFpQkYsSUFBakI7QUFDQUosVUFBUTZDLEtBQVIsQ0FBYztBQUNaQyw2Q0FBdUMxQyxJQUF2QyxTQUErQ0UsSUFEbkM7QUFFWnlDLFdBQU87QUFGSyxHQUFkO0FBSUEsTUFBSTFDLGlCQUFhMkMsUUFBYixJQUF5QixNQUE3QixFQUFxQztBQUNuQ2hELFlBQVFpRCxJQUFSLENBQWE7QUFDWEgsK1JBRFc7QUFFWEMsYUFBTztBQUZJLEtBQWI7QUFJRDtBQUNGO0FBQ0RSIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnU2V0dGluZ3MgZnJvbSAnLi9kZWJ1Zy1zZXR0aW5ncydcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnXG5pbXBvcnQgV2ViU29ja2V0IGZyb20gJ3dzJ1xuaW1wb3J0IGNvb2tpZVBhcnNlciBmcm9tICdjb29raWUtcGFyc2VyJ1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInXG5pbXBvcnQgc2VydmVTdGF0aWMgZnJvbSAnc2VydmUtc3RhdGljJ1xuaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0J1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJ1xuaW1wb3J0IGRhdGFiYXNlX2luaXQgZnJvbSAnLi9tb2RlbHMnXG5pbXBvcnQgZ2xvYmFsQ29uZmlnIGZyb20gXCIuLi9jb25maWdzL2NvbmZpZy5qc1wiXG5pbXBvcnQgeWFtbCBmcm9tICdub2RlLXlhbWwnXG5cbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcbmNvbnN0IHNlc3Npb24gPSByZXF1aXJlKFwiZXhwcmVzcy1zZXNzaW9uXCIpXG5jb25zdCBjb25zb2xhID0gcmVxdWlyZSgnY29uc29sYScpXG5jb25zdCB7IE51eHQsIEJ1aWxkZXIgfSA9IHJlcXVpcmUoJ251eHQnKVxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5jb25zdCBob3N0ID0gZ2xvYmFsQ29uZmlnLmhvc3RcbmNvbnN0IHBvcnQgPSBnbG9iYWxDb25maWcucG9ydFxuXG5kLmFwcCA9IGFwcFxuZC5jb25zb2xhID0gY29uc29sYVxuZC5tID0gbW9uZ29vc2VcblxuYXBwLnNldCgncG9ydCcsIHBvcnQpXG5hcHAuc2V0KCdzdHJpY3Qgcm91dGluZycsIHRydWUpXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxuYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpXG5hcHAudXNlKGNvb2tpZVBhcnNlcigpKVxuYXBwLnVzZShzZXNzaW9uKHtcbiAgc2VjcmV0OiAna2V5Ym9hcmQgY2F0JywgLy8gVE9ETzogYmUgcmFuZG9tIGxhdGVyXG4gIHJlc2F2ZTogZmFsc2UsXG4gIHNhdmVVbmluaXRpYWxpemVkOiBmYWxzZSxcbn0pKVxuYXBwLnVzZShwYXNzcG9ydC5pbml0aWFsaXplKCkpXG5hcHAudXNlKHBhc3Nwb3J0LnNlc3Npb24oKSlcblxubGV0IGV4cHJlc3NXcyA9IHJlcXVpcmUoJ2V4cHJlc3Mtd3MnKShhcHApXG4vLyBtb3VudCByb3V0ZXJzIGZvciBiYWNrZW5kXG5sZXQgbW91bnRlZCA9IHJlcXVpcmUoJy4vcm91dGVzJykuZGVmYXVsdChhcHApXG5cbi8vIEltcG9ydCBhbmQgU2V0IE51eHQuanMgb3B0aW9uc1xubGV0IGNvbmZpZyA9IHJlcXVpcmUoJy4uL251eHQuY29uZmlnLmpzJylcbmNvbmZpZy5kZXYgPSAhKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpXG5cbmQubnV4dENvbmZpZyA9IGNvbmZpZ1xuZC5jb25maWcgPSBnbG9iYWxDb25maWdcbmQueWFtbCA9IHlhbWxcbmxldCBkYXRhYmFzZUNvbmZpZyA9IHlhbWwucmVhZFN5bmMoJy4uL2NvbmZpZ3MvbW9uZ29kLnltbCcpXG5kLmRhdGFiYXNlQ29uZmlnID0gZGF0YWJhc2VDb25maWdcblxuLy8gYXV0aFxuLy8gbGV0IFVzZXIgPSByZXF1aXJlKCcuL21vZGVscy9tb2RlbHMnKS5kZWZhdWx0LlVzZXJcbmNvbnN0IE1vZGVscyA9IHJlcXVpcmUoJy4vbW9kZWxzL21vZGVscycpLmRlZmF1bHRcbmxldCBVc2VyID0gTW9kZWxzLlVzZXJcbmNvbnN0IExvY2FsU3RyYXRlZ3kgPSByZXF1aXJlKCdwYXNzcG9ydC1sb2NhbCcpLlN0cmF0ZWd5XG5wYXNzcG9ydC51c2UobmV3IExvY2FsU3RyYXRlZ3koVXNlci5hdXRoZW50aWNhdGUoKSkpXG5wYXNzcG9ydC5zZXJpYWxpemVVc2VyKFVzZXIuc2VyaWFsaXplVXNlcigpKVxucGFzc3BvcnQuZGVzZXJpYWxpemVVc2VyKFVzZXIuZGVzZXJpYWxpemVVc2VyKCkpXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAvLyBJbml0IE51eHQuanNcbiAgYXdhaXQgZGF0YWJhc2VfaW5pdCh7Y29uZmlnOiBnbG9iYWxDb25maWcsIGRhdGFiYXNlQ29uZmlnfSlcbiAgY29uc3QgbnV4dCA9IG5ldyBOdXh0KGNvbmZpZylcblxuICAvLyBCdWlsZCBvbmx5IGluIGRldiBtb2RlXG4gIGlmIChjb25maWcuZGV2KSB7XG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBCdWlsZGVyKG51eHQpXG4gICAgYXdhaXQgYnVpbGRlci5idWlsZCgpXG4gIH1cblxuICAvLyBHaXZlIG51eHQgbWlkZGxld2FyZSB0byBleHByZXNzXG4gIGFwcC51c2UobnV4dC5yZW5kZXIpXG5cbiAgLy8gTGlzdGVuIHRoZSBzZXJ2ZXJcbiAgYXBwLmxpc3Rlbihwb3J0LCBob3N0KVxuICBjb25zb2xhLnJlYWR5KHtcbiAgICBtZXNzYWdlOiBgU2VydmVyIGxpc3RlbmluZyBvbiBodHRwOi8vJHtob3N0fToke3BvcnR9YCxcbiAgICBiYWRnZTogdHJ1ZVxuICB9KVxuICBpZiAoZ2xvYmFsQ29uZmlnLmRhdGFiYXNlID09ICd0ZXN0Jykge1xuICAgIGNvbnNvbGEud2Fybih7XG4gICAgICBtZXNzYWdlOiBgWW91IGFyZSB1c2luZyB0aGUgJ3Rlc3QnIGRhdGFiYXNlLCBBY2NyZXRpb24gaXMgdGh1cyBpbiB0aGUgdGVzdCBtb2RlLlxcbiAgKiBUaGUgZGF0YWJhc2Ugd2lsbCBiZSByZXNldCBieSB0ZXN0IGRhdGEgZWFjaCB0aW1lIHlvdSBzdGFydCB0aGUgYnJhaW5ob2xlLlxcbiAgKiBVc2Ugb3RoZXIgZGF0YWJhc2UgbmFtZSBpZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFjY3JldGlvbiBub3JtYWxseVxcbiAgKiBTZWUgdGhlIGNvbmZpZyBmaWxlICdjb25maWdzL2NvbmZpZy5qcydgLFxuICAgICAgYmFkZ2U6IHRydWVcbiAgICB9KVxuICB9XG59XG5zdGFydCgpXG4iXX0=