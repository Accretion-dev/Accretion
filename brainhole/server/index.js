'use strict';

var _debugSettings = require('./debug-settings');

var _debugSettings2 = _interopRequireDefault(_debugSettings);

require('babel-polyfill');

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _cookieParser = require('cookie-parser');

var _cookieParser2 = _interopRequireDefault(_cookieParser);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _serveStatic = require('serve-static');

var _serveStatic2 = _interopRequireDefault(_serveStatic);

var _passport = require('passport');

var _passport2 = _interopRequireDefault(_passport);

var _mongoose = require('mongoose');

var _mongoose2 = _interopRequireDefault(_mongoose);

var _models = require('./models');

var _models2 = _interopRequireDefault(_models);

var _config = require('../configs/config.js');

var _config2 = _interopRequireDefault(_config);

var _nodeYaml = require('node-yaml');

var _nodeYaml2 = _interopRequireDefault(_nodeYaml);

var _authRedirect = require('../common/authRedirect');

var _authRedirect2 = _interopRequireDefault(_authRedirect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var express = require('express');
var session = require("express-session");
var consola = require('consola');

var _require = require('nuxt'),
    Nuxt = _require.Nuxt,
    Builder = _require.Builder;

var app = express();
var host = _config2.default.host;
var port = _config2.default.port;

d.app = app;
d.consola = consola;
d.m = _mongoose2.default;
d.express = express;

app.set('port', port);
app.set('strict routing', true);
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use((0, _cookieParser2.default)());
app.use(session({
  secret: 'keyboard cat', // TODO: be random later
  resave: false,
  saveUninitialized: false
}));
app.use(_passport2.default.initialize());
app.use(_passport2.default.session());
// app.use(authRedirect) // redirct to login page if not auth

var expressWs = require('express-ws')(app);
// mount routers for backend
var mounted = require('./routes').default(app);

// Import and Set Nuxt.js options
var config = require('../nuxt.config.js');
config.dev = !(process.env.NODE_ENV === 'production');

d.nuxtConfig = config;
d.config = _config2.default;
d.yaml = _nodeYaml2.default;
d.app = app;
var databaseConfig = _nodeYaml2.default.readSync('../configs/mongod.yml');
d.databaseConfig = databaseConfig;

// auth
// let User = require('./models/models').default.User
var Models = require('./models/models').default;
var User = Models.User;
var LocalStrategy = require('passport-local').Strategy;
_passport2.default.use(new LocalStrategy(User.authenticate()));
_passport2.default.serializeUser(User.serializeUser());
_passport2.default.deserializeUser(User.deserializeUser());

async function start() {
  // Init Nuxt.js
  await (0, _models2.default)({ config: _config2.default, databaseConfig: databaseConfig });
  var nuxt = new Nuxt(config);
  var server = nuxt.server;
  global.d.nuxt = nuxt;

  // Build only in dev mode
  if (config.dev) {
    var builder = new Builder(nuxt);
    await builder.build();
  }

  // Give nuxt middleware to express
  app.use(nuxt.render);

  // Listen the server
  app.listen(port, host);

  consola.ready({
    message: 'Server listening on http://' + host + ':' + port,
    badge: true
  });
  if (_config2.default.database == 'test') {
    consola.warn({
      message: 'You are using the \'test\' database, Accretion is thus in the test mode.\n  * The database will be reset by test data each time you start the brainhole.\n  * Use other database name if you want to use the Accretion normally\n  * See the config file \'configs/config.js\'',
      badge: true
    });
  }
}
start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci1zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJzZXNzaW9uIiwiY29uc29sYSIsIk51eHQiLCJCdWlsZGVyIiwiYXBwIiwiaG9zdCIsImdsb2JhbENvbmZpZyIsInBvcnQiLCJkIiwibSIsIm1vbmdvb3NlIiwic2V0IiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInNlY3JldCIsInJlc2F2ZSIsInNhdmVVbmluaXRpYWxpemVkIiwicGFzc3BvcnQiLCJpbml0aWFsaXplIiwiZXhwcmVzc1dzIiwibW91bnRlZCIsImRlZmF1bHQiLCJjb25maWciLCJkZXYiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJudXh0Q29uZmlnIiwieWFtbCIsImRhdGFiYXNlQ29uZmlnIiwicmVhZFN5bmMiLCJNb2RlbHMiLCJVc2VyIiwiTG9jYWxTdHJhdGVneSIsIlN0cmF0ZWd5IiwiYXV0aGVudGljYXRlIiwic2VyaWFsaXplVXNlciIsImRlc2VyaWFsaXplVXNlciIsInN0YXJ0IiwibnV4dCIsInNlcnZlciIsImdsb2JhbCIsImJ1aWxkZXIiLCJidWlsZCIsInJlbmRlciIsImxpc3RlbiIsInJlYWR5IiwibWVzc2FnZSIsImJhZGdlIiwiZGF0YWJhc2UiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFVBQVVDLFFBQVEsU0FBUixDQUFoQjtBQUNBLElBQU1DLFVBQVVELFFBQVEsaUJBQVIsQ0FBaEI7QUFDQSxJQUFNRSxVQUFVRixRQUFRLFNBQVIsQ0FBaEI7O2VBQzBCQSxRQUFRLE1BQVIsQztJQUFsQkcsSSxZQUFBQSxJO0lBQU1DLE8sWUFBQUEsTzs7QUFDZCxJQUFNQyxNQUFNTixTQUFaO0FBQ0EsSUFBTU8s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LEVBQXFDO0FBQ25DbEQsWUFBUW1ELElBQVIsQ0FBYTtBQUNYSCwrUkFEVztBQUVYQyxhQUFPO0FBRkksS0FBYjtBQUlEO0FBQ0Y7QUFDRFYiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWdTZXR0aW5ncyBmcm9tICcuL2RlYnVnLXNldHRpbmdzJ1xuaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCdcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSAnd3MnXG5pbXBvcnQgY29va2llUGFyc2VyIGZyb20gJ2Nvb2tpZS1wYXJzZXInXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcidcbmltcG9ydCBzZXJ2ZVN0YXRpYyBmcm9tICdzZXJ2ZS1zdGF0aWMnXG5pbXBvcnQgcGFzc3BvcnQgZnJvbSAncGFzc3BvcnQnXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnXG5pbXBvcnQgZGF0YWJhc2VfaW5pdCBmcm9tICcuL21vZGVscydcbmltcG9ydCBnbG9iYWxDb25maWcgZnJvbSBcIi4uL2NvbmZpZ3MvY29uZmlnLmpzXCJcbmltcG9ydCB5YW1sIGZyb20gJ25vZGUteWFtbCdcbmltcG9ydCBhdXRoUmVkaXJlY3QgZnJvbSAnLi4vY29tbW9uL2F1dGhSZWRpcmVjdCdcblxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKVxuY29uc3Qgc2Vzc2lvbiA9IHJlcXVpcmUoXCJleHByZXNzLXNlc3Npb25cIilcbmNvbnN0IGNvbnNvbGEgPSByZXF1aXJlKCdjb25zb2xhJylcbmNvbnN0IHsgTnV4dCwgQnVpbGRlciB9ID0gcmVxdWlyZSgnbnV4dCcpXG5jb25zdCBhcHAgPSBleHByZXNzKClcbmNvbnN0IGhvc3QgPSBnbG9iYWxDb25maWcuaG9zdFxuY29uc3QgcG9ydCA9IGdsb2JhbENvbmZpZy5wb3J0XG5cbmQuYXBwID0gYXBwXG5kLmNvbnNvbGEgPSBjb25zb2xhXG5kLm0gPSBtb25nb29zZVxuZC5leHByZXNzID0gZXhwcmVzc1xuXG5hcHAuc2V0KCdwb3J0JywgcG9ydClcbmFwcC5zZXQoJ3N0cmljdCByb3V0aW5nJywgdHJ1ZSlcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSlcbmFwcC51c2UoY29va2llUGFyc2VyKCkpXG5hcHAudXNlKHNlc3Npb24oe1xuICBzZWNyZXQ6ICdrZXlib2FyZCBjYXQnLCAvLyBUT0RPOiBiZSByYW5kb20gbGF0ZXJcbiAgcmVzYXZlOiBmYWxzZSxcbiAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IGZhbHNlLFxufSkpXG5hcHAudXNlKHBhc3Nwb3J0LmluaXRpYWxpemUoKSlcbmFwcC51c2UocGFzc3BvcnQuc2Vzc2lvbigpKVxuLy8gYXBwLnVzZShhdXRoUmVkaXJlY3QpIC8vIHJlZGlyY3QgdG8gbG9naW4gcGFnZSBpZiBub3QgYXV0aFxuXG5sZXQgZXhwcmVzc1dzID0gcmVxdWlyZSgnZXhwcmVzcy13cycpKGFwcClcbi8vIG1vdW50IHJvdXRlcnMgZm9yIGJhY2tlbmRcbmxldCBtb3VudGVkID0gcmVxdWlyZSgnLi9yb3V0ZXMnKS5kZWZhdWx0KGFwcClcblxuLy8gSW1wb3J0IGFuZCBTZXQgTnV4dC5qcyBvcHRpb25zXG5sZXQgY29uZmlnID0gcmVxdWlyZSgnLi4vbnV4dC5jb25maWcuanMnKVxuY29uZmlnLmRldiA9ICEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJylcblxuZC5udXh0Q29uZmlnID0gY29uZmlnXG5kLmNvbmZpZyA9IGdsb2JhbENvbmZpZ1xuZC55YW1sID0geWFtbFxuZC5hcHAgPSBhcHBcbmxldCBkYXRhYmFzZUNvbmZpZyA9IHlhbWwucmVhZFN5bmMoJy4uL2NvbmZpZ3MvbW9uZ29kLnltbCcpXG5kLmRhdGFiYXNlQ29uZmlnID0gZGF0YWJhc2VDb25maWdcblxuLy8gYXV0aFxuLy8gbGV0IFVzZXIgPSByZXF1aXJlKCcuL21vZGVscy9tb2RlbHMnKS5kZWZhdWx0LlVzZXJcbmNvbnN0IE1vZGVscyA9IHJlcXVpcmUoJy4vbW9kZWxzL21vZGVscycpLmRlZmF1bHRcbmxldCBVc2VyID0gTW9kZWxzLlVzZXJcbmNvbnN0IExvY2FsU3RyYXRlZ3kgPSByZXF1aXJlKCdwYXNzcG9ydC1sb2NhbCcpLlN0cmF0ZWd5XG5wYXNzcG9ydC51c2UobmV3IExvY2FsU3RyYXRlZ3koVXNlci5hdXRoZW50aWNhdGUoKSkpXG5wYXNzcG9ydC5zZXJpYWxpemVVc2VyKFVzZXIuc2VyaWFsaXplVXNlcigpKVxucGFzc3BvcnQuZGVzZXJpYWxpemVVc2VyKFVzZXIuZGVzZXJpYWxpemVVc2VyKCkpXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAvLyBJbml0IE51eHQuanNcbiAgYXdhaXQgZGF0YWJhc2VfaW5pdCh7Y29uZmlnOiBnbG9iYWxDb25maWcsIGRhdGFiYXNlQ29uZmlnfSlcbiAgY29uc3QgbnV4dCA9IG5ldyBOdXh0KGNvbmZpZylcbiAgY29uc3Qgc2VydmVyID0gbnV4dC5zZXJ2ZXJcbiAgZ2xvYmFsLmQubnV4dCA9IG51eHRcblxuICAvLyBCdWlsZCBvbmx5IGluIGRldiBtb2RlXG4gIGlmIChjb25maWcuZGV2KSB7XG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBCdWlsZGVyKG51eHQpXG4gICAgYXdhaXQgYnVpbGRlci5idWlsZCgpXG4gIH1cblxuICAvLyBHaXZlIG51eHQgbWlkZGxld2FyZSB0byBleHByZXNzXG4gIGFwcC51c2UobnV4dC5yZW5kZXIpXG5cbiAgLy8gTGlzdGVuIHRoZSBzZXJ2ZXJcbiAgYXBwLmxpc3Rlbihwb3J0LCBob3N0KVxuXG4gIGNvbnNvbGEucmVhZHkoe1xuICAgIG1lc3NhZ2U6IGBTZXJ2ZXIgbGlzdGVuaW5nIG9uIGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH1gLFxuICAgIGJhZGdlOiB0cnVlXG4gIH0pXG4gIGlmIChnbG9iYWxDb25maWcuZGF0YWJhc2UgPT0gJ3Rlc3QnKSB7XG4gICAgY29uc29sYS53YXJuKHtcbiAgICAgIG1lc3NhZ2U6IGBZb3UgYXJlIHVzaW5nIHRoZSAndGVzdCcgZGF0YWJhc2UsIEFjY3JldGlvbiBpcyB0aHVzIGluIHRoZSB0ZXN0IG1vZGUuXFxuICAqIFRoZSBkYXRhYmFzZSB3aWxsIGJlIHJlc2V0IGJ5IHRlc3QgZGF0YSBlYWNoIHRpbWUgeW91IHN0YXJ0IHRoZSBicmFpbmhvbGUuXFxuICAqIFVzZSBvdGhlciBkYXRhYmFzZSBuYW1lIGlmIHlvdSB3YW50IHRvIHVzZSB0aGUgQWNjcmV0aW9uIG5vcm1hbGx5XFxuICAqIFNlZSB0aGUgY29uZmlnIGZpbGUgJ2NvbmZpZ3MvY29uZmlnLmpzJ2AsXG4gICAgICBiYWRnZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cbnN0YXJ0KClcbiJdfQ==